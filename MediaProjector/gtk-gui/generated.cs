
// This file has been generated by the GUI designer. Do not modify.
namespace Stetic
{
	internal class Gui
	{
		private static bool initialized;

		internal static void Initialize(Gtk.Widget iconRenderer)
		{
			if ((Stetic.Gui.initialized == false))
			{
				Stetic.Gui.initialized = true;
				global::Gtk.IconFactory w1 = new global::Gtk.IconFactory();
				global::Gtk.IconSet w2 = new global::Gtk.IconSet();
				global::Gtk.IconSource w3 = new global::Gtk.IconSource();
				w3.Pixbuf = global::Stetic.IconLoader.LoadIcon(iconRenderer, "gtk-cancel", global::Gtk.IconSize.Menu);
				w2.AddSource(w3);
				global::Gtk.IconSource w4 = new global::Gtk.IconSource();
				w4.Pixbuf = global::Stetic.IconLoader.LoadIcon(iconRenderer, "gtk-dialog-info", global::Gtk.IconSize.Menu);
				w2.AddSource(w4);
				global::Gtk.IconSource w5 = new global::Gtk.IconSource();
				w5.Pixbuf = global::Stetic.IconLoader.LoadIcon(iconRenderer, "gtk-dialog-warning", global::Gtk.IconSize.Menu);
				w2.AddSource(w5);
				global::Gtk.IconSource w6 = new global::Gtk.IconSource();
				w6.Pixbuf = global::Stetic.IconLoader.LoadIcon(iconRenderer, "gtk-floppy", global::Gtk.IconSize.Dialog);
				w2.AddSource(w6);
				global::Gtk.IconSource w7 = new global::Gtk.IconSource();
				w7.Pixbuf = global::Stetic.IconLoader.LoadIcon(iconRenderer, "gtk-ok", global::Gtk.IconSize.Menu);
				w2.AddSource(w7);
				global::Gtk.IconSource w8 = new global::Gtk.IconSource();
				w8.Pixbuf = global::Stetic.IconLoader.LoadIcon(iconRenderer, "gtk-paste", global::Gtk.IconSize.Menu);
				w2.AddSource(w8);
				global::Gtk.IconSource w9 = new global::Gtk.IconSource();
				w9.Pixbuf = global::Stetic.IconLoader.LoadIcon(iconRenderer, "gtk-add", global::Gtk.IconSize.Menu);
				w2.AddSource(w9);
				global::Gtk.IconSource w10 = new global::Gtk.IconSource();
				w10.Pixbuf = global::Stetic.IconLoader.LoadIcon(iconRenderer, "gtk-copy", global::Gtk.IconSize.Menu);
				w2.AddSource(w10);
				global::Gtk.IconSource w11 = new global::Gtk.IconSource();
				w11.Pixbuf = global::Stetic.IconLoader.LoadIcon(iconRenderer, "gtk-apply", global::Gtk.IconSize.Menu);
				w2.AddSource(w11);
				global::Gtk.IconSource w12 = new global::Gtk.IconSource();
				w12.Pixbuf = global::Stetic.IconLoader.LoadIcon(iconRenderer, "gtk-cancel", global::Gtk.IconSize.Menu);
				w2.AddSource(w12);
				global::Gtk.IconSource w13 = new global::Gtk.IconSource();
				w13.Pixbuf = global::Stetic.IconLoader.LoadIcon(iconRenderer, "gtk-cut", global::Gtk.IconSize.Menu);
				w2.AddSource(w13);
				global::Gtk.IconSource w14 = new global::Gtk.IconSource();
				w14.Pixbuf = global::Stetic.IconLoader.LoadIcon(iconRenderer, "gtk-close", global::Gtk.IconSize.Menu);
				w2.AddSource(w14);
				global::Gtk.IconSource w15 = new global::Gtk.IconSource();
				w15.Pixbuf = global::Stetic.IconLoader.LoadIcon(iconRenderer, "gtk-delete", global::Gtk.IconSize.Menu);
				w2.AddSource(w15);
				global::Gtk.IconSource w16 = new global::Gtk.IconSource();
				w16.Pixbuf = global::Stetic.IconLoader.LoadIcon(iconRenderer, "gtk-dialog-error", global::Gtk.IconSize.Menu);
				w2.AddSource(w16);
				global::Gtk.IconSource w17 = new global::Gtk.IconSource();
				w17.Pixbuf = global::Stetic.IconLoader.LoadIcon(iconRenderer, "gtk-dialog-question", global::Gtk.IconSize.Menu);
				w2.AddSource(w17);
				global::Gtk.IconSource w18 = new global::Gtk.IconSource();
				w18.Pixbuf = global::Stetic.IconLoader.LoadIcon(iconRenderer, "gtk-edit", global::Gtk.IconSize.Menu);
				w2.AddSource(w18);
				global::Gtk.IconSource w19 = new global::Gtk.IconSource();
				w19.Pixbuf = global::Stetic.IconLoader.LoadIcon(iconRenderer, "gtk-file", global::Gtk.IconSize.Menu);
				w2.AddSource(w19);
				global::Gtk.IconSource w20 = new global::Gtk.IconSource();
				w20.Pixbuf = global::Stetic.IconLoader.LoadIcon(iconRenderer, "gtk-media-play", global::Gtk.IconSize.Menu);
				w2.AddSource(w20);
				global::Gtk.IconSource w21 = new global::Gtk.IconSource();
				w21.Pixbuf = global::Stetic.IconLoader.LoadIcon(iconRenderer, "gtk-media-stop", global::Gtk.IconSize.Menu);
				w2.AddSource(w21);
				global::Gtk.IconSource w22 = new global::Gtk.IconSource();
				w22.Pixbuf = global::Stetic.IconLoader.LoadIcon(iconRenderer, "gtk-open", global::Gtk.IconSize.Menu);
				w2.AddSource(w22);
				global::Gtk.IconSource w23 = new global::Gtk.IconSource();
				w23.Pixbuf = global::Stetic.IconLoader.LoadIcon(iconRenderer, "gtk-save-as", global::Gtk.IconSize.Menu);
				w2.AddSource(w23);
				global::Gtk.IconSource w24 = new global::Gtk.IconSource();
				w24.Pixbuf = global::Stetic.IconLoader.LoadIcon(iconRenderer, "gtk-sort-descending", global::Gtk.IconSize.Menu);
				w2.AddSource(w24);
				global::Gtk.IconSource w25 = new global::Gtk.IconSource();
				w25.Pixbuf = global::Stetic.IconLoader.LoadIcon(iconRenderer, "gtk-sort-ascending", global::Gtk.IconSize.Menu);
				w2.AddSource(w25);
				global::Gtk.IconSource w26 = new global::Gtk.IconSource();
				w26.Pixbuf = global::Stetic.IconLoader.LoadIcon(iconRenderer, "gtk-yes", global::Gtk.IconSize.Menu);
				w2.AddSource(w26);
				w1.Add("standard_icons", w2);
				w1.AddDefault();
			}
		}
	}

	internal class IconLoader
	{
		public static Gdk.Pixbuf LoadIcon(Gtk.Widget widget, string name, Gtk.IconSize size)
		{
			Gdk.Pixbuf res = widget.RenderIcon(name, size, null);
			if ((res != null))
			{
				return res;
			}
			else
			{
				int sz;
				int sy;
				global::Gtk.Icon.SizeLookup(size, out sz, out sy);
				try
				{
					return Gtk.IconTheme.Default.LoadIcon(name, sz, 0);
				}
				catch (System.Exception)
				{
					if ((name != "gtk-missing-image"))
					{
						return Stetic.IconLoader.LoadIcon(widget, "gtk-missing-image", size);
					}
					else
					{
						Gdk.Pixmap pmap = new Gdk.Pixmap(Gdk.Screen.Default.RootWindow, sz, sz);
						Gdk.GC gc = new Gdk.GC(pmap);
						gc.RgbFgColor = new Gdk.Color(255, 255, 255);
						pmap.DrawRectangle(gc, true, 0, 0, sz, sz);
						gc.RgbFgColor = new Gdk.Color(0, 0, 0);
						pmap.DrawRectangle(gc, false, 0, 0, (sz - 1), (sz - 1));
						gc.SetLineAttributes(3, Gdk.LineStyle.Solid, Gdk.CapStyle.Round, Gdk.JoinStyle.Round);
						gc.RgbFgColor = new Gdk.Color(255, 0, 0);
						pmap.DrawLine(gc, (sz / 4), (sz / 4), ((sz - 1)
										- (sz / 4)), ((sz - 1)
										- (sz / 4)));
						pmap.DrawLine(gc, ((sz - 1)
										- (sz / 4)), (sz / 4), (sz / 4), ((sz - 1)
										- (sz / 4)));
						return Gdk.Pixbuf.FromDrawable(pmap, pmap.Colormap, 0, 0, 0, 0, sz, sz);
					}
				}
			}
		}
	}

	internal class ActionGroups
	{
		public static Gtk.ActionGroup GetActionGroup(System.Type type)
		{
			return Stetic.ActionGroups.GetActionGroup(type.FullName);
		}

		public static Gtk.ActionGroup GetActionGroup(string name)
		{
			return null;
		}
	}
}
